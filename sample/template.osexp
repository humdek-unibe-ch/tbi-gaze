---
API: 3
OpenSesame: 4.0.5
Platform: nt
---
set width 2560
set uniform_coordinates yes
set title "New experiment"
set subject_parity even
set subject_nr 0
set start experiment
set sound_sample_size -16
set sound_freq 48000
set sound_channels 2
set sound_buf_size 1024
set sampler_backend legacy
set round_decimals 2
set mouse_backend legacy
set keyboard_backend legacy
set height 1440
set fullscreen no
set form_clicks no
set foreground white
set font_underline no
set font_size 18
set font_italic False
set font_family mono
set font_bold False
set experiment_path "C:\\Users\\moiri\\Documents\\git-tbi-gaze\\sample"
set disable_garbage_collection False
set description "The main experiment item"
set coordinates uniform
set compensation 0
set color_backend legacy
set clock_backend legacy
set canvas_backend legacy
set background black

define sketchpad ThankYou
	set duration 3
	set description "Displays stimuli"
	draw textline center=1 color=white font_bold=no font_family=mono font_italic=no font_size=18 html=yes show_if=True text="Thank You!" x=0 y=0 z_index=0

define sequence experiment
	set flush_keyboard yes
	set description "Runs a number of items in sequence"
	run welcome always
	run gaze_start always
	run gaze_calibration always
	run gaze_validation True
	run new_loop True
	run gaze_stop always
	run ThankYou True

define inline_script gaze_calibration
	set description "Executes Python code"
	set _run "gazeCalibration()"
	set _prepare ""

define inline_script gaze_drift_compensation
	set description "Executes Python code"
	set _run "gazeDriftCompensation()"
	set _prepare ""

define inline_script gaze_recording_disable
	set description "Executes Python code"
	___run__
	gazeRecordingDisable(label = "")
	__end__
	set _prepare ""

define inline_script gaze_recording_enable
	set description "Executes Python code"
	set _run "gazeRecordingEnable(trialId = var.get(u'trial_id'), reset = True)"
	set _prepare ""

define inline_script gaze_start
	set description "Executes Python code"
	___run__
	print("start gaze process")
	#subprocess.Popen([f"{gazeAppPath}\\Gaze.exe", "/subject", f"{var.get(u'subject_nr')}", "/outputPath", f"{var.get(u'experiment_path')}"])
	subprocess.Popen([f"{gazeAppPath}\\Gaze.exe", "/subject", f"{var.get(u'subject_nr')}"])
	time.sleep(3)
	__end__
	___prepare__
	import subprocess, json, time
	
	gazeAppPath = "\\\\130.92.158.19\\runexp\\applications\\TPF_EyeTracking\\current"
	gazeAppPath = "C:\\Users\\moiri\\Documents\\git-tbi-gaze\\build"
	print(f"use path {gazeAppPath}")
	
	# use 'lib' to call c# methods directly from python (default, lower latency)
	# use 'app' to run the GazeControl.exe as subprocess
	mode = 'lib'
	if mode == 'lib':
	    import clr, sys
	    sys.path.append(r"C:\Users\moiri\Documents\git-tbi-gaze\build")
	    clr.AddReference("GazeControlLibrary")
	    from GazeControlLibrary import NamedPipeClient
	elif mode == 'app':
	    si = subprocess.STARTUPINFO()
	    si.dwFlags |= subprocess.STARTF_USESHOWWINDOW
	    si.wShowWindow = subprocess.SW_HIDE
	    DETACHED_PROCESS = 0x08000008
	
	def printGazeAnnotation(trialId, label, reset):
	    if trialId is not None:
	        print("annotate gaze data with trial ID " + str(trialId))
	    if label is not None:
	        print("annotate gaze data with label " + label)
	    if reset is True:
	        print("reset relative timestamp")
	        
	def gazeCommand(command = None, trialId = None, label = None, reset = False):
	    if mode == 'lib':
	        NamedPipeClient.HandleCommands(command, reset, trialId, label)
	    elif mode == 'app':
	        gazeCommandApp(command, trialId, label, reset)
	
	def gazeCommandApp(command = None, trialId = None, label = None, reset = False):
	    args = [f"{gazeAppPath}\\GazeControl.exe"]
	    if command is not None:
	        args.append("/command")
	        args.append(command)
	    if trialId is not None:
	        args.append("/trialId")
	        args.append(str(trialId))
	    if label is not None:
	        args.append("/label")
	        args.append(label)
	    if reset is True:
	        args.append("/reset")
	    subprocess.run(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE, startupinfo=si, creationflags=DETACHED_PROCESS)
	    
	def gazeCalibration(trialId = None, label = None, reset = False):
	    gazeCommand("CUSTOM_CALIBRATE", trialId, label, reset)
	    print("gaze calibration done")
	    printGazeAnnotation(trialId, label, reset)
	
	def gazeValidation(trialId = None, label = None, reset = False):
	    gazeCommand("VALIDATE", trialId, label, reset)
	    print("gaze validation done")
	    printGazeAnnotation(trialId, label, reset)
	
	def gazeDriftCompensation(trialId = None, label = None, reset = False):
	    gazeCommand("DRIFT_COMPENSATION", trialId, label, reset)
	    print("gaze drift compensation done")
	    printGazeAnnotation(trialId, label, reset)
	
	def gazeDriftCompensationReset(trialId = None, label = None, reset = False):
	    gazeCommand("RESET_DRIFT_COMPENSATION", trialId, label, reset)
	    print("gaze drift compensation reset")
	    printGazeAnnotation(trialId, label, reset)
	
	def gazeRecordingDisable(trialId = None, label = None, reset = False):
	    gazeCommand("GAZE_RECORDING_DISABLE", trialId, label, reset)
	    print("disable gaze recording")
	    printGazeAnnotation(trialId, label, reset)
	
	def gazeRecordingEnable(trialId = None, label = None, reset = False):
	    gazeCommand("GAZE_RECORDING_ENABLE", trialId, label, reset)
	    print("enable gaze recording")
	    printGazeAnnotation(trialId, label, reset)
	
	def mouseTrackingDisable(trialId = None, label = None, reset = False):
	    gazeCommand("MOUSE_TRACKING_DISABLE", trialId, label, reset)
	    print("disable mouse tracking")
	    printGazeAnnotation(trialId, label, reset)
	
	def mouseTrackingEnable(trialId = None, label = None, reset = False):
	    gazeCommand("MOUSE_TRACKING_ENABLE", trialId, label, reset)
	    print("enable mouse tracking")
	    printGazeAnnotation(trialId, label, reset)
	
	def gazeTerminate():
	    gazeCommand("TERMINATE")
	    print("stop gaze process")
	    
	def gazeAnnotate(trialId = None, label = None, reset = False):
	    gazeCommand(trialId = trialId, label = label, reset = reset)
	    printGazeAnnotation(trialId, label, reset)
	__end__

define inline_script gaze_stop
	set description "Executes Python code"
	set _run "gazeTerminate()"
	set _prepare ""

define inline_script gaze_validation
	set description "Executes Python code"
	set _run "gazeValidation()"
	set _prepare ""

define loop new_1_loop
	set source_file ""
	set source table
	set repeat 1
	set order sequential
	set description "Repeatedly runs another item"
	set cycles 3
	set continuous no
	set break_if_on_first yes
	set break_if never
	setcycle 0 label label1
	setcycle 1 label label2
	setcycle 2 label label3
	run new_1_sequence

define sequence new_1_sequence
	set flush_keyboard yes
	set description "Runs a number of items in sequence"
	run set_label True
	run new_advanced_delay True

define advanced_delay new_advanced_delay
	set jitter_mode Uniform
	set jitter 0
	set duration 1000
	set description "Waits for a specified duration"

define loop new_loop
	set source_file ""
	set source table
	set repeat 1
	set order sequential
	set description "Repeatedly runs another item"
	set cycles 3
	set continuous no
	set break_if_on_first yes
	set break_if never
	setcycle 0 trial_id 1
	setcycle 1 trial_id 2
	setcycle 2 trial_id 3
	run new_sequence

define sequence new_sequence
	set flush_keyboard yes
	set description "Runs a number of items in sequence"
	run gaze_drift_compensation True
	run gaze_recording_enable True
	run new_1_loop True
	run gaze_recording_disable True

define inline_script set_label
	set description "Executes Python code"
	set _run "gazeAnnotate(label = var.get(u'label'))"
	set _prepare ""

define sketchpad welcome
	set start_response_interval no
	set reset_variables no
	set duration 0
	set description "Displays stimuli"
	draw textline center=1 color=white font_bold=no font_family=serif font_italic=no font_size=32 html=yes show_if=always text="OpenSesame 4.0 <i>Eye Tracking</i>" x=0 y=0 z_index=0

